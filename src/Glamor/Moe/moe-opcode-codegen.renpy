%enum_map paintcap u8 SkPaint::Cap
BUTT SkPaint::Cap::kButt_Cap
ROUND SkPaint::Cap::kRound_Cap
SQUARE SkPaint::Cap::kSquare_Cap
%end_enum_map

%enum_map paintjoin u8 SkPaint::Join
MITER SkPaint::Join::kMiter_Join
ROUND SkPaint::Join::kRound_Join
BEVEL SkPaint::Join::kBevel_Join
%end_enum_map

%enum_map blendmode u8 SkBlendMode
CLEAR SkBlendMode::kClear
SRC SkBlendMode::kSrc
DST SkBlendMode::kDst
SRC_OVER SkBlendMode::kSrcOver
DST_OVER SkBlendMode::kDstOver
SRC_IN SkBlendMode::kSrcIn
DST_IN SkBlendMode::kDstIn
SRC_OUT SkBlendMode::kSrcOut
DST_OUT SkBlendMode::kDstOut
SRC_ATOP SkBlendMode::kSrcATop
DST_ATOP SkBlendMode::kDstATop
XOR SkBlendMode::kXor
PLUS SkBlendMode::kPlus
MODULATE SkBlendMode::kModulate
SCREEN SkBlendMode::kScreen
OVERLAY SkBlendMode::kOverlay
DARKEN SkBlendMode::kDarken
LIGHTEN SkBlendMode::kLighten
COLOR_DODGE SkBlendMode::kColorDodge
COLOR_BURN SkBlendMode::kColorBurn
HARD_LIGHT SkBlendMode::kHardLight
SOFT_LIGHT SkBlendMode::kSoftLight
DIFFERENCE SkBlendMode::kDifference
EXCLUSION SkBlendMode::kExclusion
MULTIPLY SkBlendMode::kMultiply
HUE SkBlendMode::kHue
SATURATION SkBlendMode::kSaturation
COLOR SkBlendMode::kColor
LUMINOSITY SkBlendMode::kLuminosity
%end_enum_map

%enum_map tilemode u8 SkTileMode
CLAMP SkTileMode::kClamp
REPEAT SkTileMode::kRepeat
MIRROR SkTileMode::kMirror
DECAL SkTileMode::kDecal
%end_enum_map

%enum_map regionop u8 SkRegion::Op
DIFFERENCE SkRegion::Op::kDifference_Op
INTERSECT SkRegion::Op::kIntersect_Op
UNION SkRegion::Op::kUnion_Op
XOR SkRegion::Op::kXOR_Op
REVERSE_DIFFERENCE SkRegion::Op::kReverseDifference_Op
REPLACE SkRegion::Op::kReplace_Op
%end_enum_map

%enum_map colorchannel u8 SkColorChannel
R SkColorChannel::kR
G SkColorChannel::kG
B SkColorChannel::kB
A SkColorChannel::kA
%end_enum_map

%enum_map filtermode u8 SkFilterMode
NEAREST SkFilterMode::kNearest
LINEAR SkFilterMode::kLinear
%end_enum_map

%enum_map mipmapmode u8 SkMipmapMode
NONE SkMipmapMode::kNone
NEAREST SkMipmapMode::kNearest
LINEAR SkMipmapMode::kLinear
%end_enum_map

%enum_map pathfilltype u8 SkPathFillType
WINDING SkPathFillType::kWinding
EVEN_ODD SkPathFillType::kEvenOdd
INVERSE_WINDING SkPathFillType::kInverseWinding
INVERSE_EVEN_ODD SkPathFillType::kInverseEvenOdd
%end_enum_map

%enum_map clipop u8 SkClipOp
DIFFERENCE SkClipOp::kDifference
INTERSECT  SkClipOp::kIntersect
%end_enum_map



.SwitchNextBuffer
%{
    throw_error("Unexpected [SwitchNextBuffer] annotation");
%}

.CommandPoolEnd
%{
    throw_error("Unexpected [CommandPoolEnd] annotation");
%}

.DrawBounds                 f32 $width, f32 $height
%{
    throw_error("Unexpected [DrawBounds] annotation");
%}



HeapClone                   any %from, any %key
%{
    heap.Clone(from, key);
%}

HeapFree                    any %key
%{
    heap.Free(key);
%}




HeapCreateU32Array          any %key, u32 $size
%{
    heap.Allocate<MoeHeap::U32Array>(key, size);
%}

HeapCreateF32Array          any %key, u32 $size
%{
    heap.Allocate<MoeHeap::F32Array>(key, size);
%}

HeapU32ArrayStore           u32array %array, u32 $idx, u32 $value
%{
    if (idx >= array.size())
        throw_error("Array index is out of range");
    array[idx] = value;
%}

HeapF32ArrayStore           f32array %array, u32 $idx, f32 $value
%{
    if (idx >= array.size())
        throw_error("Array index is out of range");
    array[idx] = value;
%}




HeapCreateM44               any %key
%{
    heap.Allocate<SkM44>(key);
%}




HeapCreatePaint             any %key
%{
    heap.Allocate<SkPaint>(key);
%}




HeapCreateSamplingOptions   any %key, filtermode $filter, mipmapmode $mipmap
%{
    heap.Allocate<SkSamplingOptions>(key, filter, mipmap);
%}

HeapCreateSamplingOptionsCubicMitchell any %key
%{
    heap.Allocate<SkSamplingOptions>(key, SkCubicResampler::Mitchell());
%}

HeapCreateSamplingOptionsCubicCatmullRom any %key
%{
    heap.Allocate<SkSamplingOptions>(key, SkCubicResampler::CatmullRom());
%}



HeapCreatePath              any %key
%{
    heap.Allocate<SkPath>(key);
%}




HeapCreateVector2           any %key, f32 $x, f32 $y
%{
    heap.Allocate<SkV2>(key, SkV2{x, y});
%}

HeapCreateVector3           any %key, f32 $x, f32 $y, f32 $z
%{
    heap.Allocate<SkV3>(key, SkV3{x, y, z});
%}

HeapCreateVector4           any %key, f32 $x, f32 $y, f32 $z, f32 $w
%{
    heap.Allocate<SkV4>(key, SkV4{x, y, z, w});
%}




HeapCreateRect              any %key, f32 $x, f32 $y, f32 $w, f32 $h
%{
    heap.Allocate<SkRect>(key, SkRect::MakeXYWH(x, y, w, h));
%}

HeapCreateRRectEmpty        any %key
%{
    heap.Allocate<SkRRect>(key, SkRRect::MakeEmpty());
%}

HeapCreateRRectOval         any %key, rect %oval
%{
    heap.Allocate<SkRRect>(key, SkRRect::MakeOval(oval));
%}

HeapCreateRRectXY           any %key, rect %rect, f32 $xRad, f32 $yRad
%{
    heap.Allocate<SkRRect>(key, SkRRect::MakeRectXY(rect, xRad, yRad));
%}

HeapCreateRRectRect         any %key, rect %rect
%{
    heap.Allocate<SkRRect>(key, SkRRect::MakeRect(rect));
%}

RRectSetNinePatch           rrect %r, rect %rect, f32 $leftRad, f32 $topRad, f32 $rightRad, f32 $bottomRad
%{
    r.setNinePatch(rect, leftRad, topRad, rightRad, bottomRad);
%}

RRectSetOval                rrect %r, rect %oval
%{
    r.setOval(oval);
%}

RRectSetRectXY              rrect %r, rect %rect, f32 $xRad, f32 $yRad
%{
    r.setRectXY(rect, xRad, yRad);
%}

RRectInset                  rrect %r, f32 $dx, f32 $dy
%{
    r.inset(dx, dy);
%}

RRectOutset                 rrect %r, f32 $dx, f32 $dy
%{
    r.outset(dx, dy);
%}

RRectOffset                 rrect %r, f32 $dx, f32 $dy
%{
    r.offset(dx, dy);
%}




HeapCreateRegion            any %key
%{
    heap.Allocate<SkRegion>(key);
%}

HeapCreateRegion2           any %key, rect %rect
%{
    SkIRect irect = SkIRect::MakeXYWH(rect.x(), rect.y(), rect.width(), rect.height());
    heap.Allocate<SkRegion>(key, irect);
%}

RegionOpRect                region %region, regionop $op, rect %rect
%{
    SkIRect irect = SkIRect::MakeXYWH(rect.x(), rect.y(), rect.width(), rect.height());
    region.op(irect, op);
%}

RegionOpRegion              region %region, regionop $op, region %rgn
%{
    region.op(rgn, op);
%}




HeapCreateEmptyShader       any %key
%{
    heap.Allocate<sk_sp<SkShader>>(key, SkShaders::Empty());
%}

HeapCreateColorShader       any %key, u32 $color
%{
    heap.Allocate<sk_sp<SkShader>>(key, SkShaders::Color(color));
%}

HeapCreateBlendShader       any %key, blender %blender, shader %dst, shader %src
%{
    heap.Allocate<sk_sp<SkShader>>(key, SkShaders::Blend(blender, dst, src));
%}

HeapCreateLinearGradientShader any %key, vec2 %start, vec2 %end, u32array %colors, f32array? %pos, tilemode $mode
%{
    if (pos && colors.size() != pos->size())
        throw_error("Array 'colors' and 'pos' had different size");
    SkPoint pts[2] = { {start.x, start.y}, {end.x, end.y} };
    auto shader = SkGradientShader::MakeLinear(pts, colors.data(), pos ? pos->data() : nullptr, colors.size(), mode);
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}

HeapCreateRadialGradientShader any %key, vec2 %center, f32 $radius, u32array %colors, f32array? %pos, tilemode $mode
%{
    if (pos && colors.size() != pos->size())
        throw_error("Array 'colors' and 'pos' had different size");
    SkPoint pcenter{center.x, center.y};
    auto shader = SkGradientShader::MakeRadial(pcenter, radius, colors.data(),
                                               pos ? pos->data() : nullptr, colors.size(), mode);
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}

HeapCreateTwoPointConicalGradientShader any %key, vec2 %start, f32 $startRadius, vec2 %end, f32 $endRadius, u32array %colors, f32array %pos, tilemode $mode
%{
    if (colors.size() != pos.size())
        throw_error("Array 'colors' and 'pos' had different size");
    SkPoint pstart{start.x, start.y};
    SkPoint pend{end.x, end.y};
    auto shader = SkGradientShader::MakeTwoPointConical(pstart, startRadius, pend, endRadius,
                                                        colors.data(), pos.data(), colors.size(), mode);
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}

HeapCreateSweepGradientShader any %key, f32 $cx, f32 $cy, u32array %colors, f32array? %pos
%{
    if (pos && colors.size() != pos->size())
        throw_error("Array 'colors' and 'pos' had different size");
    auto shader = SkGradientShader::MakeSweep(cx, cy, colors.data(), pos ? pos->data() : nullptr, colors.size());
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}

HeapCreatePerlinNoiseFractalNoiseShader any %key, f32 $baseFreqX, f32 $baseFreqY, u32 $numOctaves, f32 $seed
%{
    auto shader = SkPerlinNoiseShader::MakeFractalNoise(baseFreqX, baseFreqY, numOctaves, seed);
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}

HeapCreatePerlinNoiseTurbulenceShader any %key, f32 $baseFreqX, f32 $baseFreqY, u32 $numOctaves, f32 $seed
%{
    auto shader = SkPerlinNoiseShader::MakeTurbulence(baseFreqX, baseFreqY, numOctaves, seed);
    heap.Allocate<sk_sp<SkShader>>(key, shader);
%}




HeapCreateModeBlender       any %key, blendmode $mode
%{
    heap.Allocate<sk_sp<SkBlender>>(key, SkBlender::Mode(mode));
%}

HeapCreateArithmeticBlender any %key, f32 $k1, f32 $k2, f32 $k3, f32 $k4, u8 $enforcePremul
%{
    heap.Allocate<sk_sp<SkBlender>>(key, SkBlenders::Arithmetic(k1, k2, k3, k4, enforcePremul));
%}




HeapCreateAlphaThresholdImageFilter any %key, region %region, f32 $innerMin, f32 $outerMax, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::AlphaThreshold(region, innerMin, outerMax,
                                                 input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateArithmeticImageFilter any %key, f32 $k1, f32 $k2, f32 $k3, f32 $k4, u8 $enforcePMColor, imagefilter? %bg, imagefilter? %fg, rect? %crop
%{
    auto filter = SkImageFilters::Arithmetic(k1, k2, k3, k4, enforcePMColor,
                                             bg ? *bg : nullptr,
                                             fg ? *fg : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateBlendImageFilter  any %key, blender %blender, imagefilter? %bg, imagefilter? %fg, rect? %crop
%{
    auto filter = SkImageFilters::Blend(blender,
                                        bg ? *bg : nullptr,
                                        fg ? *fg : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateBlurImageFilter   any %key, f32 $sigmaX, f32 $sigmaY, tilemode $mode, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::Blur(sigmaX, sigmaY, mode, input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateColorFilterImageFilter any %key, colorfilter %cf, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::ColorFilter(cf, input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateComposeImageFilter any %key, imagefilter %outer, imagefilter %inner
%{
    auto filter = SkImageFilters::Compose(outer, inner);
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateDisplacementMapImageFilter any %key, colorchannel $xselector, colorchannel $yselector, f32 $scale, imagefilter? %displacement, imagefilter %color, rect? %crop
%{
    auto filter = SkImageFilters::DisplacementMap(xselector, yselector, scale,
                                                  displacement ? *displacement : nullptr,
                                                  color, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateDropShadowImageFilter any %key, f32 $dx, f32 $dy, f32 $sigmaX, f32 $sigmaY, u32 $color, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::DropShadow(dx, dy, sigmaX, sigmaY, color,
                                             input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateDropShadowOnlyImageFilter any %key, f32 $dx, f32 $dy, f32 $sigmaX, f32 $sigmaY, u32 $color, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::DropShadowOnly(dx, dy, sigmaX, sigmaY, color,
                                                 input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateMagnifierImageFilter any %key, rect %srcRect, f32 $inset, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::Magnifier(srcRect, inset, input ? *input : nullptr,
                                            SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateMatrixConvolutionImageFilter any %key, vec2 %kernelSize, f32array %kernel, f32 $gain, f32 $bias, vec2 %kernelOffset, tilemode $mode, u8 $useAlpha, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::MatrixConvolution(SkISize::Make(kernelSize.x, kernelSize.y),
                                                    kernel.data(),
                                                    gain,
                                                    bias,
                                                    SkIPoint::Make(kernelOffset.x, kernelOffset.y),
                                                    mode,
                                                    useAlpha,
                                                    input ? *input : nullptr,
                                                    SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateMatrixTransformImageFilter any %key, mat4x4 %matrix, samplingoptions %sampling, imagefilter? %input
%{
    auto filter = SkImageFilters::MatrixTransform(matrix.asM33(), sampling, input ? *input : nullptr);
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateOffsetImageFilter any %key, f32 $dx, f32 $dy, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::Offset(dx, dy, input ? *input : nullptr, SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateShaderImageFilter any %key, shader %shader, u8 $dither, rect? %crop
%{
    auto filter = SkImageFilters::Shader(shader,
                                         dither ? SkImageFilters::Dither::kYes : SkImageFilters::Dither::kNo,
                                         SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateTileImageFilter   any %key, rect %src, rect %dst, imagefilter? %input
%{
    auto filter = SkImageFilters::Tile(src, dst, input ? *input : nullptr);
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateDilateImageFilter any %key, f32 $radiusX, f32 $radiusY, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::Dilate(radiusX, radiusY, input ? *input : nullptr,
                                         SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}

HeapCreateErodeImageFilter  any %key, f32 $radiusX, f32 $radiusY, imagefilter? %input, rect? %crop
%{
    auto filter = SkImageFilters::Erode(radiusX, radiusY, input ? *input : nullptr,
                                        SkImageFilters::CropRect(crop));
    heap.Allocate<sk_sp<SkImageFilter>>(key, filter);
%}




M44SetRows                  mat4x4 %m, vec4 %r0, vec4 %r1, vec4 %r2, vec4 %r3
%{
    m = SkM44::Rows(r0, r1, r2, r3);
%}

M44SetCols                  mat4x4 %m, vec4 %c0, vec4 %c1, vec4 %c2, vec4 %c3
%{
    m = SkM44::Cols(c0, c1, c2, c3);
%}

M44SetTranslate             mat4x4 %m, f32 $x, f32 $y, f32 $z
%{
    m.setTranslate(x, y, z);
%}

M44SetScale                 mat4x4 %m, f32 $x, f32 $y, f32 $z
%{
    m.setScale(x, y, z);
%}

M44SetRectToRect            mat4x4 %m, rect %src, rect %dst
%{
    m = SkM44::RectToRect(src, dst);
%}

M44SetLookAt                mat4x4 %m, vec3 %eye, vec3 %center, vec3 %up
%{
    m = SkM44::LookAt(eye, center, up);
%}

M44SetPerspective           mat4x4 %m, f32 $near, f32 $far, f32 $angle
%{
    m = SkM44::Perspective(near, far, angle);
%}

M44SetIdentity              mat4x4 %m
%{
    m.setIdentity();
%}

M44Concat                   mat4x4 %m, mat4x4 %other
%{
    m.preConcat(other);
%}




PaintReset                  paint %p
%{
    p.reset();
%}

PaintSetAntialias           paint %p, u8 $aa
%{
    p.setAntiAlias(aa);
%}

PaintSetDither              paint %p, u8 $dither
%{
    p.setDither(dither);
%}

PaintSetStyleStroke         paint %p, u8 $stroke
%{
    p.setStroke(stroke);
%}

PaintSetColor               paint %p, u32 $color
%{
    p.setColor(color);
%}

PaintSetAlphaf              paint %p, f32 $alpha
%{
    p.setAlphaf(alpha);
%}

PaintSetColorARGB           paint %p, u8 $a, u8 $r, u8 $g, u8 $b
%{
    p.setARGB(a, r, g, b);
%}

PaintSetStrokeWidth         paint %p, f32 $width
%{
    p.setStrokeWidth(width);
%}

PaintSetStrokeMiter         paint %p, f32 $miter
%{
    p.setStrokeMiter(miter);
%}

PaintSetStrokeCap           paint %p, paintcap $cap
%{
    p.setStrokeCap(cap);
%}

PaintSetStrokeJoin          paint %p, paintjoin $join
%{
    p.setStrokeJoin(join);
%}

PaintSetShader              paint %p, shader %shader
%{
    p.setShader(shader);
%}

PaintSetColorFilter         paint %p, colorfilter %f
%{
    p.setColorFilter(f);
%}

PaintSetBlendMode           paint %p, blendmode $mode
%{
    p.setBlendMode(mode);
%}

PaintSetBlender             paint %p, blender %blender
%{
    p.setBlender(blender);
%}

PaintSetPathEffect          paint %p, patheffect %effect
%{
    p.setPathEffect(effect);
%}

PaintSetMaskFilter          paint %p, maskfilter %filter
%{
    p.setMaskFilter(filter);
%}

PaintSetImageFilter         paint %p, imagefilter %filter
%{
    p.setImageFilter(filter);
%}




PathSetPathFillType         path %p, pathfilltype $type
%{
    p.setFillType(type);
%}

PathToggleInverseFillType   path %p
%{
    p.toggleInverseFillType();
%}

PathReset                   path %p
%{
    p.reset();
%}

PathMoveTo                  path %p, f32 $x, f32 $y
%{
    p.moveTo(x, y);
%}

PathRMoveTo                 path %p, f32 $dx, f32 $dy
%{
    p.rMoveTo(dx, dy);
%}

PathLineTo                  path %p, f32 $x, f32 $y
%{
    p.lineTo(x, y);
%}

PathRLineTo                 path %p, f32 $dx, f32 $dy
%{
    p.rLineTo(dx, dy);
%}

PathQuadTo                  path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2
%{
    p.quadTo(x1, y1, x2, y2);
%}

PathRQuadTo                 path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2
%{
    p.rQuadTo(dx1, dy1, dx2, dy2);
%}

PathConicTo                 path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $w
%{
    p.conicTo(x1, y1, x2, y2, w);
%}

PathRConicTo                path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2, f32 $w
%{
    p.rConicTo(dx1, dy1, dx2, dy2, w);
%}

PathCubicTo                 path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $x3, f32 $y3
%{
    p.cubicTo(x1, y1, x2, y2, x3, y3);
%}

PathRCubicTo                path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2, f32 $dx3, f32 $dy3
%{
    p.rCubicTo(dx1, dy1, dx2, dy3, dx3, dy3);
%}

PathRectArcTo               path %p, rect %oval, f32 $startAngle, f32 $sweepAngle, u8 $forceMoveTo
%{
    p.arcTo(oval, startAngle, sweepAngle, forceMoveTo);
%}

PathTangentArcTo            path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $radius
%{
    p.arcTo(x1, y1, x2, y2, radius);
%}

PathRotateArcTo             path %p, f32 $rx, f32 $ry, f32 $xAxisRotate, u8 $largeArc, u8 $ccwSweep, f32 $x, f32 $y
%{
    p.arcTo(rx, ry, xAxisRotate, largeArc ? SkPath::kLarge_ArcSize : SkPath::kSmall_ArcSize,
            ccwSweep ? SkPathDirection::kCCW : SkPathDirection::kCW, x, y);
%}

PathRRotateArcTo            path %p, f32 $rx, f32 $ry, f32 $xAxisRotate, u8 $largeArc, u8 $ccwSweep, f32 $dx, f32 $dy
%{
    p.rArcTo(rx, ry, xAxisRotate, largeArc ? SkPath::kLarge_ArcSize : SkPath::kSmall_ArcSize,
             ccwSweep ? SkPathDirection::kCCW : SkPathDirection::kCW, dx, dy);
%}

PathClose                   path %p
%{
    p.close();
%}

PathAddRect                 path %p, rect %rect, u8 $ccwDir
%{
    p.addRect(rect, ccwDir ? SkPathDirection::kCCW : SkPathDirection::kCW, 0);
%}

PathAddOval                 path %p, rect %oval, u8 $ccwDir
%{
    p.addOval(oval, ccwDir ? SkPathDirection::kCCW : SkPathDirection::kCW);
%}

PathAddCircle               path %p, f32 $x, f32 $y, f32 $radius, u8 $ccwDir
%{
    p.addCircle(x, y, radius, ccwDir ? SkPathDirection::kCCW : SkPathDirection::kCW);
%}

PathAddArc                  path %p, rect %oval, f32 $startAngle, f32 $sweepAngle
%{
    p.addArc(oval, startAngle, sweepAngle);
%}

PathAddUniformRoundRect     path %p, rect %rect, f32 $rx, f32 $ry, u8 $ccwDir
%{
    p.addRoundRect(rect, rx, ry, ccwDir ? SkPathDirection::kCCW : SkPathDirection::kCW);
%}

PathAddRoundRect            path %p, rect %rect, f32array %radii, u8 $ccwDir
%{
    if (radii.size() != 8)
        throw_error("Operand F32Array 'radii' has invalid size (expecting 8)");
    p.addRoundRect(rect, radii.data(), ccwDir ? SkPathDirection::kCCW : SkPathDirection::kCW);
%}

PathAddPoly                 path %p, f32array %pts, u8 $close
%{
    if (pts.size() & 1)
        throw_error("Operand F32Array 'pts' has invalid size (expecting even number)");
    uint32_t count = pts.size() >> 1;
    std::vector<SkPoint> vp(count);
    for (uint32_t i = 0; i < count; i++)
        vp.emplace_back(SkPoint::Make(pts[i * 2], pts[i * 2 + 1]));
    p.addPoly(vp.data(), count, close);
%}

PathTransform               path %p, mat4x4 %mat, path %dst, u8 $applyPerspectiveClip
%{
    p.transform(mat.asM33(), &dst,
                applyPerspectiveClip ? SkApplyPerspectiveClip::kYes : SkApplyPerspectiveClip::kNo);
%}




Save
%{
    IR_CHECK_CANVAS;
    canvas->save();
%}

Restore
%{
    IR_CHECK_CANVAS;
    canvas->restore();
%}

Translate                   f32 $dx, f32 $dy
%{
    IR_CHECK_CANVAS;
    canvas->translate(dx, dy);
%}

Scale                       f32 $sx, f32 $sy
%{
    IR_CHECK_CANVAS;
    canvas->scale(sx, sy);
%}

Rotate                      f32 $degrees
%{
    IR_CHECK_CANVAS;
    canvas->rotate(degrees);
%}

Rotate2                     f32 $degrees, f32 $px, f32 $py
%{
    IR_CHECK_CANVAS;
    canvas->rotate(degrees, px, py);
%}

Skew                        f32 $sx, f32 $sy
%{
    IR_CHECK_CANVAS;
    canvas->skew(sx, sy);
%}

Concat                      mat4x4 %matrix
%{
    IR_CHECK_CANVAS;
    canvas->concat(matrix);
%}

ResetMatrix
%{
    IR_CHECK_CANVAS;
    canvas->resetMatrix();
%}

SetMatrix                   mat4x4 %matrix
%{
    IR_CHECK_CANVAS;
    canvas->setMatrix(matrix);
%}

ClipRect                    rect %rect, clipop $op, u8 $doAntialias
%{
    IR_CHECK_CANVAS;
    canvas->clipRect(rect, op, doAntialias);
%}

ClipRRect                   rrect %rect, clipop $op, u8 $doAntialias
%{
    IR_CHECK_CANVAS;
    canvas->clipRRect(rect, op, doAntialias);
%}

ClipPath                    path %path, clipop $op, u8 $doAntialias
%{
    IR_CHECK_CANVAS;
    canvas->clipPath(path, op, doAntialias);
%}

ClipShader                  shader %shader, clipop $op
%{
    IR_CHECK_CANVAS;
    canvas->clipShader(shader, op);
%}

ClipRegion                  region %rgn, clipop $op
%{
    IR_CHECK_CANVAS;
    canvas->clipRegion(rgn, op);
%}

DrawColor                   u32 $color, blendmode $mode
%{
    IR_CHECK_CANVAS;
    canvas->drawColor(color, mode);
%}

Clear                       u32 $color
%{
    IR_CHECK_CANVAS;
    canvas->clear(color);
%}

DrawPaint                   paint %p
%{
    IR_CHECK_CANVAS;
    canvas->drawPaint(p);
%}

DrawLine                    f32 $x0, f32 $y0, f32 $x1, f32 $y1, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawLine(x0, y0, x1, y1, paint);
%}

DrawRect                    rect %rect, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawRect(rect, paint);
%}

DrawRegion                  region %rgn, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawRegion(rgn, paint);
%}

DrawOval                    rect %oval, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawOval(oval, paint);
%}

DrawRRect                   rrect %rrect, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawRRect(rrect, paint);
%}

DrawDRRect                  rrect %outer, rrect %inner, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawDRRect(outer, inner, paint);
%}

DrawCircle                  f32 $cx, f32 $cy, f32 $radius, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawCircle(cx, cy, radius, paint);
%}

DrawArc                     rect %oval, f32 $startAngle, f32 $sweepAngle, u8 $useCenter, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawArc(oval, startAngle, sweepAngle, useCenter, paint);
%}

DrawPath                    path %path, paint %paint
%{
    IR_CHECK_CANVAS;
    canvas->drawPath(path, paint);
%}

DrawImage                   image %image, f32 $left, f32 $top, samplingoptions? %sampling, paint? %paint
%{
    IR_CHECK_CANVAS;
    SkSamplingOptions s = sampling ? *sampling : SkSamplingOptions();
    canvas->drawImage(image.get(), left, top, s, paint);
%}

DrawImageRect               image %image, rect %dst, samplingoptions? %sampling, paint? %paint
%{
    IR_CHECK_CANVAS;
    SkSamplingOptions s = sampling ? *sampling : SkSamplingOptions();
    canvas->drawImageRect(image, dst, s, paint);
%}

DrawPicture                 picture %pic, mat4x4? %matrix, paint? %paint
%{
    IR_CHECK_CANVAS;
    if (matrix)
    {
        SkMatrix m33 = matrix->asM33();
        canvas->drawPicture(pic, &m33, paint);
    }
    else
        canvas->drawPicture(pic, nullptr, paint);
%}

