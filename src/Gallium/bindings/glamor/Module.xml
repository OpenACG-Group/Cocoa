<?xml version="1.0" encoding="UTF-8"?>
<module>
    <info name="glamor" description="Cocoa Glamor 2D Rendering Infrastructure"/>
    <metadata namespace="cocoa::gallium::bindings::glamor_wrap" class="GlamorBinding"/>
    <include src="Gallium/bindings/glamor/Exports.h"/>
    <include src="Gallium/bindings/glamor/Scene.h"/>
    <include src="Gallium/bindings/glamor/SceneBuilder.h"/>
    <include src="Glamor/Surface.h"/>
    <include src="Glamor/Monitor.h"/>
    <hook on="instantiate" call="GlamorSetInstanceProperties"/>
    <exports>
        <toplevel type="declaration" name="Constants"/>

        <class name="RenderHost" wrapper="RenderHostWrap">
            <method static="true" name="Initialize" value="@Initialize"/>
            <method static="true" name="Dispose" value="@Dispose"/>
            <method static="true" name="Connect" value="@Connect"/>
            <method static="true" name="WaitForSyncBarrier" value="@WaitForSyncBarrier"/>
            <method static="true" name="SleepRendererFor" value="@SleepRendererFor"/>
            <method static="true" name="TraceGraphicsResources" value="@TraceGraphicsResources"/>
            <method static="true" name="SetTypefaceTransferCallback" value="@SetTypefaceTransferCallback"/>
        </class>

        <class name="RenderClientObject" wrapper="RenderClientObjectWrap" invisible="true">
            <method name="connect" value="@connect"/>
            <method name="disconnect" value="@disconnect"/>
            <method name="inspectObject" value="@inspectObject"/>
        </class>

        <class name="Display" wrapper="DisplayWrap" inherit="RenderClientObjectWrap">
            <method name="close" value="@close"/>
            <method name="createRasterSurface" value="@createRasterSurface"/>
            <method name="createHWComposeSurface" value="@createHWComposeSurface"/>
            <method name="requestMonitorList" value="@requestMonitorList"/>
            <property name="defaultCursorTheme" getter="@getDefaultCursorTheme"/>
            <method name="loadCursorTheme" value="@loadCursorTheme"/>
            <method name="createCursor" value="@createCursor"/>
        </class>

        <class name="Monitor" wrapper="MonitorWrap" inherit="RenderClientObjectWrap">
            <method name="requestPropertySet" value="@requestPropertySet"/>

            <!-- Enumeration map for gl::MonitorSubpixel -->
            <property static="true" name="SUBPIXEL_UNKNOWN" value="V_CAST_U32(gl::MonitorSubpixel::kUnknown)"/>
            <property static="true" name="SUBPIXEL_NONE" value="V_CAST_U32(gl::MonitorSubpixel::kNone)"/>
            <property static="true" name="SUBPIXEL_HORIZONTAL_RGB" value="V_CAST_U32(gl::MonitorSubpixel::kHorizontalRGB)"/>
            <property static="true" name="SUBPIXEL_HORIZONTAL_BGR" value="V_CAST_U32(gl::MonitorSubpixel::kHorizontalBGR)"/>
            <property static="true" name="SUBPIXEL_VERTICAL_RGB" value="V_CAST_U32(gl::MonitorSubpixel::kVerticalRGB)"/>
            <property static="true" name="SUBPIXEL_VERTICAL_BGR" value="V_CAST_U32(gl::MonitorSubpixel::kVerticalBGR)"/>

            <!-- Enumeration map for gl::MonitorTransform -->
            <property static="true" name="TRANSFORM_NORMAL" value="V_CAST_U32(gl::MonitorTransform::kNormal)"/>
            <property static="true" name="TRANSFORM_ROTATE_90" value="V_CAST_U32(gl::MonitorTransform::kRotate90)"/>
            <property static="true" name="TRANSFORM_ROTATE_180" value="V_CAST_U32(gl::MonitorTransform::kRotate180)"/>
            <property static="true" name="TRANSFORM_ROTATE_270" value="V_CAST_U32(gl::MonitorTransform::kRotate270)"/>
            <property static="true" name="TRANSFORM_FLIPPED" value="V_CAST_U32(gl::MonitorTransform::kFlipped)"/>
            <property static="true" name="TRANSFORM_FLIPPED_90" value="V_CAST_U32(gl::MonitorTransform::kFlipped90)"/>
            <property static="true" name="TRANSFORM_FLIPPED_180" value="V_CAST_U32(gl::MonitorTransform::kFlipped180)"/>
            <property static="true" name="TRANSFORM_FLIPPED_270" value="V_CAST_U32(gl::MonitorTransform::kFlipped270)"/>

            <!-- Enumeration map for gl::MonitorMode -->
            <property static="true" name="MODE_CURRENT" value="V_CAST_U32(gl::MonitorMode::kCurrent)"/>
            <property static="true" name="MODE_PREFERRED" value="V_CAST_U32(gl::MonitorMode::kPreferred)"/>
        </class>

        <class name="CursorTheme" wrapper="CursorThemeWrap" inherit="RenderClientObjectWrap">
            <method name="dispose" value="@dispose"/>
            <method name="loadCursorFromName" value="@loadCursorFromName"/>
        </class>

        <class name="Cursor" wrapper="CursorWrap" inherit="RenderClientObjectWrap">
            <method name="dispose" value="@dispose"/>
            <method name="getHotspotVector" value="@getHotspotVector"/>
        </class>

        <class name="Surface" wrapper="SurfaceWrap" inherit="RenderClientObjectWrap">
            <property name="width" getter="@getWidth"/>
            <property name="height" getter="@getHeight"/>
            <method name="createBlender" value="@createBlender"/>
            <method name="close" value="@close"/>
            <method name="resize" value="@resize"/>
            <method name="setTitle" value="@setTitle"/>
            <method name="getBuffersDescriptor" value="@getBuffersDescriptor"/>
            <method name="requestNextFrame" value="@requestNextFrame"/>
            <method name="setMinSize" value="@setMinSize"/>
            <method name="setMaxSize" value="@setMaxSize"/>
            <method name="setMaximized" value="@setMaximized"/>
            <method name="setMinimized" value="@setMinimized"/>
            <method name="setFullscreen" value="@setFullscreen"/>
            <method name="setAttachedCursor" value="@setAttachedCursor"/>

            <!-- Enumeration map for gl::ToplevelStates -->
            <property static="true" name="TOPLEVEL_MAXIMIZED" value="V_CAST_U32(gl::ToplevelStates::kMaximized)"/>
            <property static="true" name="TOPLEVEL_FULLSCREEN" value="V_CAST_U32(gl::ToplevelStates::kFullscreen)"/>
            <property static="true" name="TOPLEVEL_RESIZING" value="V_CAST_U32(gl::ToplevelStates::kResizing)"/>
            <property static="true" name="TOPLEVEL_ACTIVATED" value="V_CAST_U32(gl::ToplevelStates::kActivated)"/>
            <property static="true" name="TOPLEVEL_TILED_LEFT" value="V_CAST_U32(gl::ToplevelStates::kTiledLeft)"/>
            <property static="true" name="TOPLEVEL_TILED_RIGHT" value="V_CAST_U32(gl::ToplevelStates::kTiledRight)"/>
            <property static="true" name="TOPLEVEL_TILED_TOP" value="V_CAST_U32(gl::ToplevelStates::kTiledTop)"/>
            <property static="true" name="TOPLEVEL_TILED_BOTTOM" value="V_CAST_U32(gl::ToplevelStates::kTiledBottom)"/>

            <!-- Enumeration map for gl::PointerButton -->
            <property static="true" name="POINTER_BUTTON_LEFT" value="V_CAST_U32(gl::PointerButton::kLeft)"/>
            <property static="true" name="POINTER_BUTTON_RIGHT" value="V_CAST_U32(gl::PointerButton::kRight)"/>
            <property static="true" name="POINTER_BUTTON_MIDDLE" value="V_CAST_U32(gl::PointerButton::kMiddle)"/>
            <property static="true" name="POINTER_BUTTON_SIDE" value="V_CAST_U32(gl::PointerButton::kSide)"/>
            <property static="true" name="POINTER_BUTTON_EXTRA" value="V_CAST_U32(gl::PointerButton::kExtra)"/>
            <property static="true" name="POINTER_BUTTON_FORWARD" value="V_CAST_U32(gl::PointerButton::kForward)"/>
            <property static="true" name="POINTER_BUTTON_BACK" value="V_CAST_U32(gl::PointerButton::kBack)"/>
            <property static="true" name="POINTER_BUTTON_TASK" value="V_CAST_U32(gl::PointerButton::kTask)"/>
        </class>

        <class name="Blender" wrapper="BlenderWrap" inherit="RenderClientObjectWrap">
            <method name="dispose" value="@dispose"/>
            <method name="update" value="@update"/>
            <method name="createTextureFromImage" value="@createTextureFromImage"/>
            <method name="createTextureFromEncodedData" value="@createTextureFromEncodedData"/>
            <method name="createTextureFromPixmap" value="@createTextureFromPixmap"/>
            <method name="deleteTexture" value="@deleteTexture"/>
            <method name="newTextureDeletionSubscriptionSignal" value="@newTextureDeletionSubscriptionSignal"/>
            <method name="purgeRasterCacheResources" value="@purgeRasterCacheResources"/>
        </class>

        <class name="Scene" wrapper="Scene">
            <method name="dispose" value="@dispose"/>
            <method name="toImage" value="@toImage"/>
            <method name="toString" value="@toString"/>
        </class>

        <class name="SceneBuilder" wrapper="SceneBuilder">
            <constructor prototype="int32_t, int32_t"/>
            <method name="pop" value="@pop"/>
            <method name="build" value="@build"/>
            <method name="pushOffset" value="@pushOffset"/>
            <method name="pushImageFilter" value="@pushImageFilter"/>
            <method name="pushBackdropFilter" value="@pushBackdropFilter"/>
            <method name="addPicture" value="@addPicture"/>
            <method name="addTexture" value="@addTexture"/>
        </class>

        <class name="CkImageFilter" wrapper="CkImageFilterWrap">
            <method static="true" name="MakeFromDSL" value="@MakeFromDSL"/>
            <method static="true" name="Deserialize" value="@Deserialize"/>
            <method name="serialize" value="@serialize"/>
        </class>

        <class name="CkColorFilter" wrapper="CkColorFilterWrap">
            <method static="true" name="MakeFromDSL" value="@MakeFromDSL"/>
            <method static="true" name="Deserialize" value="@Deserialize"/>
            <method name="serialize" value="@serialize"/>
        </class>

        <class name="CkBitmap" wrapper="CkBitmapWrap">
            <method static="true" name="MakeFromBuffer" value="@MakeFromBuffer"/>
            <method static="true" name="MakeFromEncodedFile" value="@MakeFromEncodedFile"/>
            <property name="width" getter="@getWidth"/>
            <property name="height" getter="@getHeight"/>
            <property name="alphaType" getter="@getAlphaType"/>
            <property name="colorType" getter="@getColorType"/>
            <property name="bytesPerPixel" getter="@getBytesPerPixel"/>
            <property name="rowBytesAsPixels" getter="@getRowBytesAsPixels"/>
            <property name="getShiftPerPixel" getter="@getShiftPerPixel"/>
            <property name="rowBytes" getter="@getRowBytes"/>
            <method name="computeByteSize" value="@computeByteSize"/>
            <method name="toImage" value="@toImage"/>
            <method name="getPixelBuffer" value="@getPixelBuffer"/>
        </class>

        <class name="CkImage" wrapper="CkImageWrap">
            <method static="true" name="MakeFromEncodedData" value="@MakeFromEncodedData"/>
            <method static="true" name="MakeFromEncodedFile" value="@MakeFromEncodedFile"/>
            <method name="encodeToData" value="@encodeToData"/>
            <method name="uniqueId" value="@uniqueId"/>
            <property name="width" getter="@getWidth"/>
            <property name="height" getter="@getHeight"/>
            <property name="alphaType" getter="@getAlphaType"/>
            <property name="colorType" getter="@getColorType"/>
        </class>

        <class name="CkPicture" wrapper="CkPictureWrap">
            <method static="true" name="MakeFromData" value="@MakeFromData"/>
            <method static="true" name="MakeFromFile" value="@MakeFromFile"/>
            <method name="serialize" value="@serialize"/>
            <method name="approximateOpCount" value="@approximateOpCount"/>
            <method name="approximateByteUsed" value="@approximateByteUsed"/>
            <method name="uniqueId" value="@uniqueId"/>

            <!-- Enumeration map for gl::CkPictureWrap::PictureUsage -->
            <property static="true" name="USAGE_GENERIC" value="V_CAST_U32(@kGeneric_Usage)"/>
            <property static="true" name="USAGE_TRANSFER" value="V_CAST_U32(@kTransfer_Usage)"/>
        </class>
    </exports>
</module>
