
/**
 * This file was generated by Renpy Code Generating Scripts and built by building system
 * automatically.
 * Never modify this file manually or compile it standalone.
 * Renpy generator script: /home/sora/Project/C++/Cocoa/script/./renpy-codegen-moe-opcode.py
 * Source file: ../src/Glamor/Moe/moe-opcode-codegen.renpy
 */

import { IProtoBufferWriter } from '../canvaskit_iface';
export namespace Opcode {
// Description: .SwitchNextBuffer
export const kSwitchNextBuffer = 0x1;

// Description: .CommandPoolEnd
export const kCommandPoolEnd = 0x2;

// Description: .DrawBounds                 f32 $width, f32 $height
export const kDrawBounds = 0x3;

// Description: .DebugBreakpoint            u32 $bpid
export const kDebugBreakpoint = 0x4;

// Description: HeapClone                   any %from, any %key
export const kHeapClone = 0x5;

// Description: HeapFree                    any %key
export const kHeapFree = 0x6;

// Description: HeapCreateU32Array          any %key, u32 $size
export const kHeapCreateU32Array = 0x7;

// Description: HeapCreateF32Array          any %key, u32 $size
export const kHeapCreateF32Array = 0x8;

// Description: HeapU32ArrayStore           u32array %array, u32 $idx, u32 $value
export const kHeapU32ArrayStore = 0x9;

// Description: HeapF32ArrayStore           f32array %array, u32 $idx, f32 $value
export const kHeapF32ArrayStore = 0xa;

// Description: HeapCreateM44               any %key
export const kHeapCreateM44 = 0xb;

// Description: HeapCreatePaint             any %key
export const kHeapCreatePaint = 0xc;

// Description: HeapCreateSamplingOptions   any %key, filtermode $filter, mipmapmode $mipmap
export const kHeapCreateSamplingOptions = 0xd;

// Description: HeapCreateSamplingOptionsCubicMitchell any %key
export const kHeapCreateSamplingOptionsCubicMitchell = 0xe;

// Description: HeapCreateSamplingOptionsCubicCatmullRom any %key
export const kHeapCreateSamplingOptionsCubicCatmullRom = 0xf;

// Description: HeapCreatePath              any %key
export const kHeapCreatePath = 0x10;

// Description: HeapCreateVector2           any %key, f32 $x, f32 $y
export const kHeapCreateVector2 = 0x11;

// Description: HeapCreateVector3           any %key, f32 $x, f32 $y, f32 $z
export const kHeapCreateVector3 = 0x12;

// Description: HeapCreateVector4           any %key, f32 $x, f32 $y, f32 $z, f32 $w
export const kHeapCreateVector4 = 0x13;

// Description: HeapCreateRect              any %key, f32 $x, f32 $y, f32 $w, f32 $h
export const kHeapCreateRect = 0x14;

// Description: HeapCreateRRectEmpty        any %key
export const kHeapCreateRRectEmpty = 0x15;

// Description: HeapCreateRRectOval         any %key, rect %oval
export const kHeapCreateRRectOval = 0x16;

// Description: HeapCreateRRectXY           any %key, rect %rect, f32 $xRad, f32 $yRad
export const kHeapCreateRRectXY = 0x17;

// Description: HeapCreateRRectRect         any %key, rect %rect
export const kHeapCreateRRectRect = 0x18;

// Description: RRectSetNinePatch           rrect %r, rect %rect, f32 $leftRad, f32 $topRad, f32 $rightRad, f32 $bottomRad
export const kRRectSetNinePatch = 0x19;

// Description: RRectSetOval                rrect %r, rect %oval
export const kRRectSetOval = 0x1a;

// Description: RRectSetRectXY              rrect %r, rect %rect, f32 $xRad, f32 $yRad
export const kRRectSetRectXY = 0x1b;

// Description: RRectInset                  rrect %r, f32 $dx, f32 $dy
export const kRRectInset = 0x1c;

// Description: RRectOutset                 rrect %r, f32 $dx, f32 $dy
export const kRRectOutset = 0x1d;

// Description: RRectOffset                 rrect %r, f32 $dx, f32 $dy
export const kRRectOffset = 0x1e;

// Description: HeapCreateRegion            any %key
export const kHeapCreateRegion = 0x1f;

// Description: HeapCreateRegion2           any %key, rect %rect
export const kHeapCreateRegion2 = 0x20;

// Description: RegionOpRect                region %region, regionop $op, rect %rect
export const kRegionOpRect = 0x21;

// Description: RegionOpRegion              region %region, regionop $op, region %rgn
export const kRegionOpRegion = 0x22;

// Description: HeapCreateEmptyShader       any %key
export const kHeapCreateEmptyShader = 0x23;

// Description: HeapCreateColorShader       any %key, u32 $color
export const kHeapCreateColorShader = 0x24;

// Description: HeapCreateBlendShader       any %key, blender %blender, shader %dst, shader %src
export const kHeapCreateBlendShader = 0x25;

// Description: HeapCreateLinearGradientShader any %key, vec2 %start, vec2 %end, u32array %colors, f32array? %pos, tilemode $mode
export const kHeapCreateLinearGradientShader = 0x26;

// Description: HeapCreateRadialGradientShader any %key, vec2 %center, f32 $radius, u32array %colors, f32array? %pos, tilemode $mode
export const kHeapCreateRadialGradientShader = 0x27;

// Description: HeapCreateTwoPointConicalGradientShader any %key, vec2 %start, f32 $startRadius, vec2 %end, f32 $endRadius, u32array %colors, f32array %pos, tilemode $mode
export const kHeapCreateTwoPointConicalGradientShader = 0x28;

// Description: HeapCreateSweepGradientShader any %key, f32 $cx, f32 $cy, u32array %colors, f32array? %pos
export const kHeapCreateSweepGradientShader = 0x29;

// Description: HeapCreatePerlinNoiseFractalNoiseShader any %key, f32 $baseFreqX, f32 $baseFreqY, u32 $numOctaves, f32 $seed
export const kHeapCreatePerlinNoiseFractalNoiseShader = 0x2a;

// Description: HeapCreatePerlinNoiseTurbulenceShader any %key, f32 $baseFreqX, f32 $baseFreqY, u32 $numOctaves, f32 $seed
export const kHeapCreatePerlinNoiseTurbulenceShader = 0x2b;

// Description: HeapCreateModeBlender       any %key, blendmode $mode
export const kHeapCreateModeBlender = 0x2c;

// Description: HeapCreateArithmeticBlender any %key, f32 $k1, f32 $k2, f32 $k3, f32 $k4, u8 $enforcePremul
export const kHeapCreateArithmeticBlender = 0x2d;

// Description: HeapCreateAlphaThresholdImageFilter any %key, region %region, f32 $innerMin, f32 $outerMax, imagefilter? %input, rect? %crop
export const kHeapCreateAlphaThresholdImageFilter = 0x2e;

// Description: HeapCreateArithmeticImageFilter any %key, f32 $k1, f32 $k2, f32 $k3, f32 $k4, u8 $enforcePMColor, imagefilter? %bg, imagefilter? %fg, rect? %crop
export const kHeapCreateArithmeticImageFilter = 0x2f;

// Description: HeapCreateBlendImageFilter  any %key, blender %blender, imagefilter? %bg, imagefilter? %fg, rect? %crop
export const kHeapCreateBlendImageFilter = 0x30;

// Description: HeapCreateBlurImageFilter   any %key, f32 $sigmaX, f32 $sigmaY, tilemode $mode, imagefilter? %input, rect? %crop
export const kHeapCreateBlurImageFilter = 0x31;

// Description: HeapCreateColorFilterImageFilter any %key, colorfilter %cf, imagefilter? %input, rect? %crop
export const kHeapCreateColorFilterImageFilter = 0x32;

// Description: HeapCreateComposeImageFilter any %key, imagefilter %outer, imagefilter %inner
export const kHeapCreateComposeImageFilter = 0x33;

// Description: HeapCreateDisplacementMapImageFilter any %key, colorchannel $xselector, colorchannel $yselector, f32 $scale, imagefilter? %displacement, imagefilter %color, rect? %crop
export const kHeapCreateDisplacementMapImageFilter = 0x34;

// Description: HeapCreateDropShadowImageFilter any %key, f32 $dx, f32 $dy, f32 $sigmaX, f32 $sigmaY, u32 $color, imagefilter? %input, rect? %crop
export const kHeapCreateDropShadowImageFilter = 0x35;

// Description: HeapCreateDropShadowOnlyImageFilter any %key, f32 $dx, f32 $dy, f32 $sigmaX, f32 $sigmaY, u32 $color, imagefilter? %input, rect? %crop
export const kHeapCreateDropShadowOnlyImageFilter = 0x36;

// Description: HeapCreateMagnifierImageFilter any %key, rect %srcRect, f32 $inset, imagefilter? %input, rect? %crop
export const kHeapCreateMagnifierImageFilter = 0x37;

// Description: HeapCreateMatrixConvolutionImageFilter any %key, vec2 %kernelSize, f32array %kernel, f32 $gain, f32 $bias, vec2 %kernelOffset, tilemode $mode, u8 $useAlpha, imagefilter? %input, rect? %crop
export const kHeapCreateMatrixConvolutionImageFilter = 0x38;

// Description: HeapCreateMatrixTransformImageFilter any %key, mat4x4 %matrix, samplingoptions %sampling, imagefilter? %input
export const kHeapCreateMatrixTransformImageFilter = 0x39;

// Description: HeapCreateOffsetImageFilter any %key, f32 $dx, f32 $dy, imagefilter? %input, rect? %crop
export const kHeapCreateOffsetImageFilter = 0x3a;

// Description: HeapCreateShaderImageFilter any %key, shader %shader, u8 $dither, rect? %crop
export const kHeapCreateShaderImageFilter = 0x3b;

// Description: HeapCreateTileImageFilter   any %key, rect %src, rect %dst, imagefilter? %input
export const kHeapCreateTileImageFilter = 0x3c;

// Description: HeapCreateDilateImageFilter any %key, f32 $radiusX, f32 $radiusY, imagefilter? %input, rect? %crop
export const kHeapCreateDilateImageFilter = 0x3d;

// Description: HeapCreateErodeImageFilter  any %key, f32 $radiusX, f32 $radiusY, imagefilter? %input, rect? %crop
export const kHeapCreateErodeImageFilter = 0x3e;

// Description: M44SetRows                  mat4x4 %m, vec4 %r0, vec4 %r1, vec4 %r2, vec4 %r3
export const kM44SetRows = 0x3f;

// Description: M44SetCols                  mat4x4 %m, vec4 %c0, vec4 %c1, vec4 %c2, vec4 %c3
export const kM44SetCols = 0x40;

// Description: M44SetTranslate             mat4x4 %m, f32 $x, f32 $y, f32 $z
export const kM44SetTranslate = 0x41;

// Description: M44SetScale                 mat4x4 %m, f32 $x, f32 $y, f32 $z
export const kM44SetScale = 0x42;

// Description: M44SetRectToRect            mat4x4 %m, rect %src, rect %dst
export const kM44SetRectToRect = 0x43;

// Description: M44SetLookAt                mat4x4 %m, vec3 %eye, vec3 %center, vec3 %up
export const kM44SetLookAt = 0x44;

// Description: M44SetPerspective           mat4x4 %m, f32 $near, f32 $far, f32 $angle
export const kM44SetPerspective = 0x45;

// Description: M44SetIdentity              mat4x4 %m
export const kM44SetIdentity = 0x46;

// Description: M44Concat                   mat4x4 %m, mat4x4 %other
export const kM44Concat = 0x47;

// Description: PaintReset                  paint %p
export const kPaintReset = 0x48;

// Description: PaintSetAntialias           paint %p, u8 $aa
export const kPaintSetAntialias = 0x49;

// Description: PaintSetDither              paint %p, u8 $dither
export const kPaintSetDither = 0x4a;

// Description: PaintSetStyleStroke         paint %p, u8 $stroke
export const kPaintSetStyleStroke = 0x4b;

// Description: PaintSetColor               paint %p, u32 $color
export const kPaintSetColor = 0x4c;

// Description: PaintSetAlphaf              paint %p, f32 $alpha
export const kPaintSetAlphaf = 0x4d;

// Description: PaintSetColorARGB           paint %p, u8 $a, u8 $r, u8 $g, u8 $b
export const kPaintSetColorARGB = 0x4e;

// Description: PaintSetStrokeWidth         paint %p, f32 $width
export const kPaintSetStrokeWidth = 0x4f;

// Description: PaintSetStrokeMiter         paint %p, f32 $miter
export const kPaintSetStrokeMiter = 0x50;

// Description: PaintSetStrokeCap           paint %p, paintcap $cap
export const kPaintSetStrokeCap = 0x51;

// Description: PaintSetStrokeJoin          paint %p, paintjoin $join
export const kPaintSetStrokeJoin = 0x52;

// Description: PaintSetShader              paint %p, shader %shader
export const kPaintSetShader = 0x53;

// Description: PaintSetColorFilter         paint %p, colorfilter %f
export const kPaintSetColorFilter = 0x54;

// Description: PaintSetBlendMode           paint %p, blendmode $mode
export const kPaintSetBlendMode = 0x55;

// Description: PaintSetBlender             paint %p, blender %blender
export const kPaintSetBlender = 0x56;

// Description: PaintSetPathEffect          paint %p, patheffect %effect
export const kPaintSetPathEffect = 0x57;

// Description: PaintSetMaskFilter          paint %p, maskfilter %filter
export const kPaintSetMaskFilter = 0x58;

// Description: PaintSetImageFilter         paint %p, imagefilter %filter
export const kPaintSetImageFilter = 0x59;

// Description: PathSetPathFillType         path %p, pathfilltype $type
export const kPathSetPathFillType = 0x5a;

// Description: PathToggleInverseFillType   path %p
export const kPathToggleInverseFillType = 0x5b;

// Description: PathReset                   path %p
export const kPathReset = 0x5c;

// Description: PathMoveTo                  path %p, f32 $x, f32 $y
export const kPathMoveTo = 0x5d;

// Description: PathRMoveTo                 path %p, f32 $dx, f32 $dy
export const kPathRMoveTo = 0x5e;

// Description: PathLineTo                  path %p, f32 $x, f32 $y
export const kPathLineTo = 0x5f;

// Description: PathRLineTo                 path %p, f32 $dx, f32 $dy
export const kPathRLineTo = 0x60;

// Description: PathQuadTo                  path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2
export const kPathQuadTo = 0x61;

// Description: PathRQuadTo                 path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2
export const kPathRQuadTo = 0x62;

// Description: PathConicTo                 path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $w
export const kPathConicTo = 0x63;

// Description: PathRConicTo                path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2, f32 $w
export const kPathRConicTo = 0x64;

// Description: PathCubicTo                 path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $x3, f32 $y3
export const kPathCubicTo = 0x65;

// Description: PathRCubicTo                path %p, f32 $dx1, f32 $dy1, f32 $dx2, f32 $dy2, f32 $dx3, f32 $dy3
export const kPathRCubicTo = 0x66;

// Description: PathRectArcTo               path %p, rect %oval, f32 $startAngle, f32 $sweepAngle, u8 $forceMoveTo
export const kPathRectArcTo = 0x67;

// Description: PathTangentArcTo            path %p, f32 $x1, f32 $y1, f32 $x2, f32 $y2, f32 $radius
export const kPathTangentArcTo = 0x68;

// Description: PathRotateArcTo             path %p, f32 $rx, f32 $ry, f32 $xAxisRotate, u8 $largeArc, u8 $ccwSweep, f32 $x, f32 $y
export const kPathRotateArcTo = 0x69;

// Description: PathRRotateArcTo            path %p, f32 $rx, f32 $ry, f32 $xAxisRotate, u8 $largeArc, u8 $ccwSweep, f32 $dx, f32 $dy
export const kPathRRotateArcTo = 0x6a;

// Description: PathClose                   path %p
export const kPathClose = 0x6b;

// Description: PathAddRect                 path %p, rect %rect, u8 $ccwDir
export const kPathAddRect = 0x6c;

// Description: PathAddOval                 path %p, rect %oval, u8 $ccwDir
export const kPathAddOval = 0x6d;

// Description: PathAddCircle               path %p, f32 $x, f32 $y, f32 $radius, u8 $ccwDir
export const kPathAddCircle = 0x6e;

// Description: PathAddArc                  path %p, rect %oval, f32 $startAngle, f32 $sweepAngle
export const kPathAddArc = 0x6f;

// Description: PathAddUniformRoundRect     path %p, rect %rect, f32 $rx, f32 $ry, u8 $ccwDir
export const kPathAddUniformRoundRect = 0x70;

// Description: PathAddRoundRect            path %p, rect %rect, f32array %radii, u8 $ccwDir
export const kPathAddRoundRect = 0x71;

// Description: PathAddPoly                 path %p, f32array %pts, u8 $close
export const kPathAddPoly = 0x72;

// Description: PathTransform               path %p, mat4x4 %mat, path %dst, u8 $applyPerspectiveClip
export const kPathTransform = 0x73;

// Description: Save
export const kSave = 0x74;

// Description: Restore
export const kRestore = 0x75;

// Description: Translate                   f32 $dx, f32 $dy
export const kTranslate = 0x76;

// Description: Scale                       f32 $sx, f32 $sy
export const kScale = 0x77;

// Description: Rotate                      f32 $degrees
export const kRotate = 0x78;

// Description: Rotate2                     f32 $degrees, f32 $px, f32 $py
export const kRotate2 = 0x79;

// Description: Skew                        f32 $sx, f32 $sy
export const kSkew = 0x7a;

// Description: Concat                      mat4x4 %matrix
export const kConcat = 0x7b;

// Description: ResetMatrix
export const kResetMatrix = 0x7c;

// Description: SetMatrix                   mat4x4 %matrix
export const kSetMatrix = 0x7d;

// Description: ClipRect                    rect %rect, clipop $op, u8 $doAntialias
export const kClipRect = 0x7e;

// Description: ClipRRect                   rrect %rect, clipop $op, u8 $doAntialias
export const kClipRRect = 0x7f;

// Description: ClipPath                    path %path, clipop $op, u8 $doAntialias
export const kClipPath = 0x80;

// Description: ClipShader                  shader %shader, clipop $op
export const kClipShader = 0x81;

// Description: ClipRegion                  region %rgn, clipop $op
export const kClipRegion = 0x82;

// Description: DrawColor                   u32 $color, blendmode $mode
export const kDrawColor = 0x83;

// Description: Clear                       u32 $color
export const kClear = 0x84;

// Description: DrawPaint                   paint %p
export const kDrawPaint = 0x85;

// Description: DrawLine                    f32 $x0, f32 $y0, f32 $x1, f32 $y1, paint %paint
export const kDrawLine = 0x86;

// Description: DrawRect                    rect %rect, paint %paint
export const kDrawRect = 0x87;

// Description: DrawRegion                  region %rgn, paint %paint
export const kDrawRegion = 0x88;

// Description: DrawOval                    rect %oval, paint %paint
export const kDrawOval = 0x89;

// Description: DrawRRect                   rrect %rrect, paint %paint
export const kDrawRRect = 0x8a;

// Description: DrawDRRect                  rrect %outer, rrect %inner, paint %paint
export const kDrawDRRect = 0x8b;

// Description: DrawCircle                  f32 $cx, f32 $cy, f32 $radius, paint %paint
export const kDrawCircle = 0x8c;

// Description: DrawArc                     rect %oval, f32 $startAngle, f32 $sweepAngle, u8 $useCenter, paint %paint
export const kDrawArc = 0x8d;

// Description: DrawPath                    path %path, paint %paint
export const kDrawPath = 0x8e;

// Description: DrawImage                   image %image, f32 $left, f32 $top, samplingoptions? %sampling, paint? %paint
export const kDrawImage = 0x8f;

// Description: DrawImageRect               image %image, rect %dst, samplingoptions? %sampling, paint? %paint
export const kDrawImageRect = 0x90;

// Description: DrawPicture                 picture %pic, mat4x4? %matrix, paint? %paint
export const kDrawPicture = 0x91;

} // namespace Opcode
export namespace Constants {
export const PAINTCAP_BUTT = 0x0;
export const PAINTCAP_ROUND = 0x1;
export const PAINTCAP_SQUARE = 0x2;
export const PAINTJOIN_MITER = 0x0;
export const PAINTJOIN_ROUND = 0x1;
export const PAINTJOIN_BEVEL = 0x2;
export const BLENDMODE_CLEAR = 0x0;
export const BLENDMODE_SRC = 0x1;
export const BLENDMODE_DST = 0x2;
export const BLENDMODE_SRC_OVER = 0x3;
export const BLENDMODE_DST_OVER = 0x4;
export const BLENDMODE_SRC_IN = 0x5;
export const BLENDMODE_DST_IN = 0x6;
export const BLENDMODE_SRC_OUT = 0x7;
export const BLENDMODE_DST_OUT = 0x8;
export const BLENDMODE_SRC_ATOP = 0x9;
export const BLENDMODE_DST_ATOP = 0xa;
export const BLENDMODE_XOR = 0xb;
export const BLENDMODE_PLUS = 0xc;
export const BLENDMODE_MODULATE = 0xd;
export const BLENDMODE_SCREEN = 0xe;
export const BLENDMODE_OVERLAY = 0xf;
export const BLENDMODE_DARKEN = 0x10;
export const BLENDMODE_LIGHTEN = 0x11;
export const BLENDMODE_COLOR_DODGE = 0x12;
export const BLENDMODE_COLOR_BURN = 0x13;
export const BLENDMODE_HARD_LIGHT = 0x14;
export const BLENDMODE_SOFT_LIGHT = 0x15;
export const BLENDMODE_DIFFERENCE = 0x16;
export const BLENDMODE_EXCLUSION = 0x17;
export const BLENDMODE_MULTIPLY = 0x18;
export const BLENDMODE_HUE = 0x19;
export const BLENDMODE_SATURATION = 0x1a;
export const BLENDMODE_COLOR = 0x1b;
export const BLENDMODE_LUMINOSITY = 0x1c;
export const TILEMODE_CLAMP = 0x0;
export const TILEMODE_REPEAT = 0x1;
export const TILEMODE_MIRROR = 0x2;
export const TILEMODE_DECAL = 0x3;
export const REGIONOP_DIFFERENCE = 0x0;
export const REGIONOP_INTERSECT = 0x1;
export const REGIONOP_UNION = 0x2;
export const REGIONOP_XOR = 0x3;
export const REGIONOP_REVERSE_DIFFERENCE = 0x4;
export const REGIONOP_REPLACE = 0x5;
export const COLORCHANNEL_R = 0x0;
export const COLORCHANNEL_G = 0x1;
export const COLORCHANNEL_B = 0x2;
export const COLORCHANNEL_A = 0x3;
export const FILTERMODE_NEAREST = 0x0;
export const FILTERMODE_LINEAR = 0x1;
export const MIPMAPMODE_NONE = 0x0;
export const MIPMAPMODE_NEAREST = 0x1;
export const MIPMAPMODE_LINEAR = 0x2;
export const PATHFILLTYPE_WINDING = 0x0;
export const PATHFILLTYPE_EVEN_ODD = 0x1;
export const PATHFILLTYPE_INVERSE_WINDING = 0x2;
export const PATHFILLTYPE_INVERSE_EVEN_ODD = 0x3;
export const CLIPOP_DIFFERENCE = 0x0;
export const CLIPOP_INTERSECT = 0x1;
} // namespace Constants

export type MemOp = number;
export class ProtoCodeEmitter {
  private writer: IProtoBufferWriter;
  constructor(writer: IProtoBufferWriter) {
    this.writer = writer;
  }

  public emitSwitchNextBuffer(): void {
    this.writer.performPossibleBufferSwitching(2);
    this.writer.writeUint16Unsafe(Opcode.kSwitchNextBuffer | 0x0);
  }
  public emitCommandPoolEnd(): void {
    this.writer.performPossibleBufferSwitching(2);
    this.writer.writeUint16Unsafe(Opcode.kCommandPoolEnd | 0x0);
  }
  public emitDrawBounds(width: number, height: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawBounds | 0x200);
    this.writer.writeFloat32Unsafe(width);
    this.writer.writeFloat32Unsafe(height);
  }
  public emitDebugBreakpoint(bpid: number): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kDebugBreakpoint | 0x100);
    this.writer.writeUint32Unsafe(bpid);
  }
  public emitHeapClone(from: MemOp, key: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapClone | 0x200);
    this.writer.writeUint32Unsafe(from);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapFree(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapFree | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateU32Array(key: MemOp, size: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateU32Array | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(size);
  }
  public emitHeapCreateF32Array(key: MemOp, size: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateF32Array | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(size);
  }
  public emitHeapU32ArrayStore(array: MemOp, idx: number, value: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kHeapU32ArrayStore | 0x300);
    this.writer.writeUint32Unsafe(array);
    this.writer.writeUint32Unsafe(idx);
    this.writer.writeUint32Unsafe(value);
  }
  public emitHeapF32ArrayStore(array: MemOp, idx: number, value: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kHeapF32ArrayStore | 0x300);
    this.writer.writeUint32Unsafe(array);
    this.writer.writeUint32Unsafe(idx);
    this.writer.writeFloat32Unsafe(value);
  }
  public emitHeapCreateM44(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateM44 | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreatePaint(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreatePaint | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateSamplingOptions(key: MemOp, filter: number, mipmap: number): void {
    this.writer.performPossibleBufferSwitching(8);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateSamplingOptions | 0x300);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint8Unsafe(filter);
    this.writer.writeUint8Unsafe(mipmap);
  }
  public emitHeapCreateSamplingOptionsCubicMitchell(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateSamplingOptionsCubicMitchell | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateSamplingOptionsCubicCatmullRom(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateSamplingOptionsCubicCatmullRom | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreatePath(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreatePath | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateVector2(key: MemOp, x: number, y: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateVector2 | 0x300);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
  }
  public emitHeapCreateVector3(key: MemOp, x: number, y: number, z: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateVector3 | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(z);
  }
  public emitHeapCreateVector4(key: MemOp, x: number, y: number, z: number, w: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateVector4 | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(z);
    this.writer.writeFloat32Unsafe(w);
  }
  public emitHeapCreateRect(key: MemOp, x: number, y: number, w: number, h: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRect | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(w);
    this.writer.writeFloat32Unsafe(h);
  }
  public emitHeapCreateRRectEmpty(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRRectEmpty | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateRRectOval(key: MemOp, oval: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRRectOval | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(oval);
  }
  public emitHeapCreateRRectXY(key: MemOp, rect: MemOp, xRad: number, yRad: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRRectXY | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeFloat32Unsafe(xRad);
    this.writer.writeFloat32Unsafe(yRad);
  }
  public emitHeapCreateRRectRect(key: MemOp, rect: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRRectRect | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(rect);
  }
  public emitRRectSetNinePatch(r: MemOp, rect: MemOp, leftRad: number, topRad: number, rightRad: number, bottomRad: number): void {
    this.writer.performPossibleBufferSwitching(26);
    this.writer.writeUint16Unsafe(Opcode.kRRectSetNinePatch | 0x600);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeFloat32Unsafe(leftRad);
    this.writer.writeFloat32Unsafe(topRad);
    this.writer.writeFloat32Unsafe(rightRad);
    this.writer.writeFloat32Unsafe(bottomRad);
  }
  public emitRRectSetOval(r: MemOp, oval: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kRRectSetOval | 0x200);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeUint32Unsafe(oval);
  }
  public emitRRectSetRectXY(r: MemOp, rect: MemOp, xRad: number, yRad: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kRRectSetRectXY | 0x400);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeFloat32Unsafe(xRad);
    this.writer.writeFloat32Unsafe(yRad);
  }
  public emitRRectInset(r: MemOp, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kRRectInset | 0x300);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitRRectOutset(r: MemOp, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kRRectOutset | 0x300);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitRRectOffset(r: MemOp, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kRRectOffset | 0x300);
    this.writer.writeUint32Unsafe(r);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitHeapCreateRegion(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRegion | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateRegion2(key: MemOp, rect: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRegion2 | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(rect);
  }
  public emitRegionOpRect(region: MemOp, op: number, rect: MemOp): void {
    this.writer.performPossibleBufferSwitching(11);
    this.writer.writeUint16Unsafe(Opcode.kRegionOpRect | 0x300);
    this.writer.writeUint32Unsafe(region);
    this.writer.writeUint8Unsafe(op);
    this.writer.writeUint32Unsafe(rect);
  }
  public emitRegionOpRegion(region: MemOp, op: number, rgn: MemOp): void {
    this.writer.performPossibleBufferSwitching(11);
    this.writer.writeUint16Unsafe(Opcode.kRegionOpRegion | 0x300);
    this.writer.writeUint32Unsafe(region);
    this.writer.writeUint8Unsafe(op);
    this.writer.writeUint32Unsafe(rgn);
  }
  public emitHeapCreateEmptyShader(key: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateEmptyShader | 0x100);
    this.writer.writeUint32Unsafe(key);
  }
  public emitHeapCreateColorShader(key: MemOp, color: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateColorShader | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(color);
  }
  public emitHeapCreateBlendShader(key: MemOp, blender: MemOp, dst: MemOp, src: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateBlendShader | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(blender);
    this.writer.writeUint32Unsafe(dst);
    this.writer.writeUint32Unsafe(src);
  }
  public emitHeapCreateLinearGradientShader(key: MemOp, start: MemOp, end: MemOp, colors: MemOp, pos: MemOp, mode: number): void {
    this.writer.performPossibleBufferSwitching(23);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateLinearGradientShader | 0x600);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(start);
    this.writer.writeUint32Unsafe(end);
    this.writer.writeUint32Unsafe(colors);
    this.writer.writeUint32Unsafe(pos);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitHeapCreateRadialGradientShader(key: MemOp, center: MemOp, radius: number, colors: MemOp, pos: MemOp, mode: number): void {
    this.writer.performPossibleBufferSwitching(23);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateRadialGradientShader | 0x600);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(center);
    this.writer.writeFloat32Unsafe(radius);
    this.writer.writeUint32Unsafe(colors);
    this.writer.writeUint32Unsafe(pos);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitHeapCreateTwoPointConicalGradientShader(key: MemOp, start: MemOp, startRadius: number, end: MemOp, endRadius: number, colors: MemOp, pos: MemOp, mode: number): void {
    this.writer.performPossibleBufferSwitching(31);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateTwoPointConicalGradientShader | 0x800);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(start);
    this.writer.writeFloat32Unsafe(startRadius);
    this.writer.writeUint32Unsafe(end);
    this.writer.writeFloat32Unsafe(endRadius);
    this.writer.writeUint32Unsafe(colors);
    this.writer.writeUint32Unsafe(pos);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitHeapCreateSweepGradientShader(key: MemOp, cx: number, cy: number, colors: MemOp, pos: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateSweepGradientShader | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(cx);
    this.writer.writeFloat32Unsafe(cy);
    this.writer.writeUint32Unsafe(colors);
    this.writer.writeUint32Unsafe(pos);
  }
  public emitHeapCreatePerlinNoiseFractalNoiseShader(key: MemOp, baseFreqX: number, baseFreqY: number, numOctaves: number, seed: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreatePerlinNoiseFractalNoiseShader | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(baseFreqX);
    this.writer.writeFloat32Unsafe(baseFreqY);
    this.writer.writeUint32Unsafe(numOctaves);
    this.writer.writeFloat32Unsafe(seed);
  }
  public emitHeapCreatePerlinNoiseTurbulenceShader(key: MemOp, baseFreqX: number, baseFreqY: number, numOctaves: number, seed: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreatePerlinNoiseTurbulenceShader | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(baseFreqX);
    this.writer.writeFloat32Unsafe(baseFreqY);
    this.writer.writeUint32Unsafe(numOctaves);
    this.writer.writeFloat32Unsafe(seed);
  }
  public emitHeapCreateModeBlender(key: MemOp, mode: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateModeBlender | 0x200);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitHeapCreateArithmeticBlender(key: MemOp, k1: number, k2: number, k3: number, k4: number, enforcePremul: number): void {
    this.writer.performPossibleBufferSwitching(23);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateArithmeticBlender | 0x600);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(k1);
    this.writer.writeFloat32Unsafe(k2);
    this.writer.writeFloat32Unsafe(k3);
    this.writer.writeFloat32Unsafe(k4);
    this.writer.writeUint8Unsafe(enforcePremul);
  }
  public emitHeapCreateAlphaThresholdImageFilter(key: MemOp, region: MemOp, innerMin: number, outerMax: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(26);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateAlphaThresholdImageFilter | 0x600);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(region);
    this.writer.writeFloat32Unsafe(innerMin);
    this.writer.writeFloat32Unsafe(outerMax);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateArithmeticImageFilter(key: MemOp, k1: number, k2: number, k3: number, k4: number, enforcePMColor: number, bg: MemOp, fg: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(35);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateArithmeticImageFilter | 0x900);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(k1);
    this.writer.writeFloat32Unsafe(k2);
    this.writer.writeFloat32Unsafe(k3);
    this.writer.writeFloat32Unsafe(k4);
    this.writer.writeUint8Unsafe(enforcePMColor);
    this.writer.writeUint32Unsafe(bg);
    this.writer.writeUint32Unsafe(fg);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateBlendImageFilter(key: MemOp, blender: MemOp, bg: MemOp, fg: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateBlendImageFilter | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(blender);
    this.writer.writeUint32Unsafe(bg);
    this.writer.writeUint32Unsafe(fg);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateBlurImageFilter(key: MemOp, sigmaX: number, sigmaY: number, mode: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(23);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateBlurImageFilter | 0x600);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(sigmaX);
    this.writer.writeFloat32Unsafe(sigmaY);
    this.writer.writeUint8Unsafe(mode);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateColorFilterImageFilter(key: MemOp, cf: MemOp, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateColorFilterImageFilter | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(cf);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateComposeImageFilter(key: MemOp, outer: MemOp, inner: MemOp): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateComposeImageFilter | 0x300);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(outer);
    this.writer.writeUint32Unsafe(inner);
  }
  public emitHeapCreateDisplacementMapImageFilter(key: MemOp, xselector: number, yselector: number, scale: number, displacement: MemOp, color: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(24);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateDisplacementMapImageFilter | 0x700);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint8Unsafe(xselector);
    this.writer.writeUint8Unsafe(yselector);
    this.writer.writeFloat32Unsafe(scale);
    this.writer.writeUint32Unsafe(displacement);
    this.writer.writeUint32Unsafe(color);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateDropShadowImageFilter(key: MemOp, dx: number, dy: number, sigmaX: number, sigmaY: number, color: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(34);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateDropShadowImageFilter | 0x800);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
    this.writer.writeFloat32Unsafe(sigmaX);
    this.writer.writeFloat32Unsafe(sigmaY);
    this.writer.writeUint32Unsafe(color);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateDropShadowOnlyImageFilter(key: MemOp, dx: number, dy: number, sigmaX: number, sigmaY: number, color: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(34);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateDropShadowOnlyImageFilter | 0x800);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
    this.writer.writeFloat32Unsafe(sigmaX);
    this.writer.writeFloat32Unsafe(sigmaY);
    this.writer.writeUint32Unsafe(color);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateMagnifierImageFilter(key: MemOp, srcRect: MemOp, inset: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateMagnifierImageFilter | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(srcRect);
    this.writer.writeFloat32Unsafe(inset);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateMatrixConvolutionImageFilter(key: MemOp, kernelSize: MemOp, kernel: MemOp, gain: number, bias: number, kernelOffset: MemOp, mode: number, useAlpha: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(36);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateMatrixConvolutionImageFilter | 0xa00);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(kernelSize);
    this.writer.writeUint32Unsafe(kernel);
    this.writer.writeFloat32Unsafe(gain);
    this.writer.writeFloat32Unsafe(bias);
    this.writer.writeUint32Unsafe(kernelOffset);
    this.writer.writeUint8Unsafe(mode);
    this.writer.writeUint8Unsafe(useAlpha);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateMatrixTransformImageFilter(key: MemOp, matrix: MemOp, sampling: MemOp, input: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateMatrixTransformImageFilter | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(matrix);
    this.writer.writeUint32Unsafe(sampling);
    this.writer.writeUint32Unsafe(input);
  }
  public emitHeapCreateOffsetImageFilter(key: MemOp, dx: number, dy: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateOffsetImageFilter | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateShaderImageFilter(key: MemOp, shader: MemOp, dither: number, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(15);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateShaderImageFilter | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(shader);
    this.writer.writeUint8Unsafe(dither);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateTileImageFilter(key: MemOp, src: MemOp, dst: MemOp, input: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateTileImageFilter | 0x400);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeUint32Unsafe(src);
    this.writer.writeUint32Unsafe(dst);
    this.writer.writeUint32Unsafe(input);
  }
  public emitHeapCreateDilateImageFilter(key: MemOp, radiusX: number, radiusY: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateDilateImageFilter | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(radiusX);
    this.writer.writeFloat32Unsafe(radiusY);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitHeapCreateErodeImageFilter(key: MemOp, radiusX: number, radiusY: number, input: MemOp, crop: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kHeapCreateErodeImageFilter | 0x500);
    this.writer.writeUint32Unsafe(key);
    this.writer.writeFloat32Unsafe(radiusX);
    this.writer.writeFloat32Unsafe(radiusY);
    this.writer.writeUint32Unsafe(input);
    this.writer.writeUint32Unsafe(crop);
  }
  public emitM44SetRows(m: MemOp, r0: MemOp, r1: MemOp, r2: MemOp, r3: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kM44SetRows | 0x500);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeUint32Unsafe(r0);
    this.writer.writeUint32Unsafe(r1);
    this.writer.writeUint32Unsafe(r2);
    this.writer.writeUint32Unsafe(r3);
  }
  public emitM44SetCols(m: MemOp, c0: MemOp, c1: MemOp, c2: MemOp, c3: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kM44SetCols | 0x500);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeUint32Unsafe(c0);
    this.writer.writeUint32Unsafe(c1);
    this.writer.writeUint32Unsafe(c2);
    this.writer.writeUint32Unsafe(c3);
  }
  public emitM44SetTranslate(m: MemOp, x: number, y: number, z: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kM44SetTranslate | 0x400);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(z);
  }
  public emitM44SetScale(m: MemOp, x: number, y: number, z: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kM44SetScale | 0x400);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(z);
  }
  public emitM44SetRectToRect(m: MemOp, src: MemOp, dst: MemOp): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kM44SetRectToRect | 0x300);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeUint32Unsafe(src);
    this.writer.writeUint32Unsafe(dst);
  }
  public emitM44SetLookAt(m: MemOp, eye: MemOp, center: MemOp, up: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kM44SetLookAt | 0x400);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeUint32Unsafe(eye);
    this.writer.writeUint32Unsafe(center);
    this.writer.writeUint32Unsafe(up);
  }
  public emitM44SetPerspective(m: MemOp, near: number, far: number, angle: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kM44SetPerspective | 0x400);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeFloat32Unsafe(near);
    this.writer.writeFloat32Unsafe(far);
    this.writer.writeFloat32Unsafe(angle);
  }
  public emitM44SetIdentity(m: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kM44SetIdentity | 0x100);
    this.writer.writeUint32Unsafe(m);
  }
  public emitM44Concat(m: MemOp, other: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kM44Concat | 0x200);
    this.writer.writeUint32Unsafe(m);
    this.writer.writeUint32Unsafe(other);
  }
  public emitPaintReset(p: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kPaintReset | 0x100);
    this.writer.writeUint32Unsafe(p);
  }
  public emitPaintSetAntialias(p: MemOp, aa: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetAntialias | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(aa);
  }
  public emitPaintSetDither(p: MemOp, dither: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetDither | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(dither);
  }
  public emitPaintSetStyleStroke(p: MemOp, stroke: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetStyleStroke | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(stroke);
  }
  public emitPaintSetColor(p: MemOp, color: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetColor | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(color);
  }
  public emitPaintSetAlphaf(p: MemOp, alpha: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetAlphaf | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(alpha);
  }
  public emitPaintSetColorARGB(p: MemOp, a: number, r: number, g: number, b: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetColorARGB | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(a);
    this.writer.writeUint8Unsafe(r);
    this.writer.writeUint8Unsafe(g);
    this.writer.writeUint8Unsafe(b);
  }
  public emitPaintSetStrokeWidth(p: MemOp, width: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetStrokeWidth | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(width);
  }
  public emitPaintSetStrokeMiter(p: MemOp, miter: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetStrokeMiter | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(miter);
  }
  public emitPaintSetStrokeCap(p: MemOp, cap: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetStrokeCap | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(cap);
  }
  public emitPaintSetStrokeJoin(p: MemOp, join: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetStrokeJoin | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(join);
  }
  public emitPaintSetShader(p: MemOp, shader: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetShader | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(shader);
  }
  public emitPaintSetColorFilter(p: MemOp, f: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetColorFilter | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(f);
  }
  public emitPaintSetBlendMode(p: MemOp, mode: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetBlendMode | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitPaintSetBlender(p: MemOp, blender: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetBlender | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(blender);
  }
  public emitPaintSetPathEffect(p: MemOp, effect: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetPathEffect | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(effect);
  }
  public emitPaintSetMaskFilter(p: MemOp, filter: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetMaskFilter | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(filter);
  }
  public emitPaintSetImageFilter(p: MemOp, filter: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kPaintSetImageFilter | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(filter);
  }
  public emitPathSetPathFillType(p: MemOp, type: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kPathSetPathFillType | 0x200);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint8Unsafe(type);
  }
  public emitPathToggleInverseFillType(p: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kPathToggleInverseFillType | 0x100);
    this.writer.writeUint32Unsafe(p);
  }
  public emitPathReset(p: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kPathReset | 0x100);
    this.writer.writeUint32Unsafe(p);
  }
  public emitPathMoveTo(p: MemOp, x: number, y: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kPathMoveTo | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
  }
  public emitPathRMoveTo(p: MemOp, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kPathRMoveTo | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitPathLineTo(p: MemOp, x: number, y: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kPathLineTo | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
  }
  public emitPathRLineTo(p: MemOp, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kPathRLineTo | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitPathQuadTo(p: MemOp, x1: number, y1: number, x2: number, y2: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kPathQuadTo | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x1);
    this.writer.writeFloat32Unsafe(y1);
    this.writer.writeFloat32Unsafe(x2);
    this.writer.writeFloat32Unsafe(y2);
  }
  public emitPathRQuadTo(p: MemOp, dx1: number, dy1: number, dx2: number, dy2: number): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kPathRQuadTo | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(dx1);
    this.writer.writeFloat32Unsafe(dy1);
    this.writer.writeFloat32Unsafe(dx2);
    this.writer.writeFloat32Unsafe(dy2);
  }
  public emitPathConicTo(p: MemOp, x1: number, y1: number, x2: number, y2: number, w: number): void {
    this.writer.performPossibleBufferSwitching(26);
    this.writer.writeUint16Unsafe(Opcode.kPathConicTo | 0x600);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x1);
    this.writer.writeFloat32Unsafe(y1);
    this.writer.writeFloat32Unsafe(x2);
    this.writer.writeFloat32Unsafe(y2);
    this.writer.writeFloat32Unsafe(w);
  }
  public emitPathRConicTo(p: MemOp, dx1: number, dy1: number, dx2: number, dy2: number, w: number): void {
    this.writer.performPossibleBufferSwitching(26);
    this.writer.writeUint16Unsafe(Opcode.kPathRConicTo | 0x600);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(dx1);
    this.writer.writeFloat32Unsafe(dy1);
    this.writer.writeFloat32Unsafe(dx2);
    this.writer.writeFloat32Unsafe(dy2);
    this.writer.writeFloat32Unsafe(w);
  }
  public emitPathCubicTo(p: MemOp, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void {
    this.writer.performPossibleBufferSwitching(30);
    this.writer.writeUint16Unsafe(Opcode.kPathCubicTo | 0x700);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x1);
    this.writer.writeFloat32Unsafe(y1);
    this.writer.writeFloat32Unsafe(x2);
    this.writer.writeFloat32Unsafe(y2);
    this.writer.writeFloat32Unsafe(x3);
    this.writer.writeFloat32Unsafe(y3);
  }
  public emitPathRCubicTo(p: MemOp, dx1: number, dy1: number, dx2: number, dy2: number, dx3: number, dy3: number): void {
    this.writer.performPossibleBufferSwitching(30);
    this.writer.writeUint16Unsafe(Opcode.kPathRCubicTo | 0x700);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(dx1);
    this.writer.writeFloat32Unsafe(dy1);
    this.writer.writeFloat32Unsafe(dx2);
    this.writer.writeFloat32Unsafe(dy2);
    this.writer.writeFloat32Unsafe(dx3);
    this.writer.writeFloat32Unsafe(dy3);
  }
  public emitPathRectArcTo(p: MemOp, oval: MemOp, startAngle: number, sweepAngle: number, forceMoveTo: number): void {
    this.writer.performPossibleBufferSwitching(19);
    this.writer.writeUint16Unsafe(Opcode.kPathRectArcTo | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(oval);
    this.writer.writeFloat32Unsafe(startAngle);
    this.writer.writeFloat32Unsafe(sweepAngle);
    this.writer.writeUint8Unsafe(forceMoveTo);
  }
  public emitPathTangentArcTo(p: MemOp, x1: number, y1: number, x2: number, y2: number, radius: number): void {
    this.writer.performPossibleBufferSwitching(26);
    this.writer.writeUint16Unsafe(Opcode.kPathTangentArcTo | 0x600);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x1);
    this.writer.writeFloat32Unsafe(y1);
    this.writer.writeFloat32Unsafe(x2);
    this.writer.writeFloat32Unsafe(y2);
    this.writer.writeFloat32Unsafe(radius);
  }
  public emitPathRotateArcTo(p: MemOp, rx: number, ry: number, xAxisRotate: number, largeArc: number, ccwSweep: number, x: number, y: number): void {
    this.writer.performPossibleBufferSwitching(28);
    this.writer.writeUint16Unsafe(Opcode.kPathRotateArcTo | 0x800);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(rx);
    this.writer.writeFloat32Unsafe(ry);
    this.writer.writeFloat32Unsafe(xAxisRotate);
    this.writer.writeUint8Unsafe(largeArc);
    this.writer.writeUint8Unsafe(ccwSweep);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
  }
  public emitPathRRotateArcTo(p: MemOp, rx: number, ry: number, xAxisRotate: number, largeArc: number, ccwSweep: number, dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(28);
    this.writer.writeUint16Unsafe(Opcode.kPathRRotateArcTo | 0x800);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(rx);
    this.writer.writeFloat32Unsafe(ry);
    this.writer.writeFloat32Unsafe(xAxisRotate);
    this.writer.writeUint8Unsafe(largeArc);
    this.writer.writeUint8Unsafe(ccwSweep);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitPathClose(p: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kPathClose | 0x100);
    this.writer.writeUint32Unsafe(p);
  }
  public emitPathAddRect(p: MemOp, rect: MemOp, ccwDir: number): void {
    this.writer.performPossibleBufferSwitching(11);
    this.writer.writeUint16Unsafe(Opcode.kPathAddRect | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeUint8Unsafe(ccwDir);
  }
  public emitPathAddOval(p: MemOp, oval: MemOp, ccwDir: number): void {
    this.writer.performPossibleBufferSwitching(11);
    this.writer.writeUint16Unsafe(Opcode.kPathAddOval | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(oval);
    this.writer.writeUint8Unsafe(ccwDir);
  }
  public emitPathAddCircle(p: MemOp, x: number, y: number, radius: number, ccwDir: number): void {
    this.writer.performPossibleBufferSwitching(19);
    this.writer.writeUint16Unsafe(Opcode.kPathAddCircle | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeFloat32Unsafe(x);
    this.writer.writeFloat32Unsafe(y);
    this.writer.writeFloat32Unsafe(radius);
    this.writer.writeUint8Unsafe(ccwDir);
  }
  public emitPathAddArc(p: MemOp, oval: MemOp, startAngle: number, sweepAngle: number): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kPathAddArc | 0x400);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(oval);
    this.writer.writeFloat32Unsafe(startAngle);
    this.writer.writeFloat32Unsafe(sweepAngle);
  }
  public emitPathAddUniformRoundRect(p: MemOp, rect: MemOp, rx: number, ry: number, ccwDir: number): void {
    this.writer.performPossibleBufferSwitching(19);
    this.writer.writeUint16Unsafe(Opcode.kPathAddUniformRoundRect | 0x500);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeFloat32Unsafe(rx);
    this.writer.writeFloat32Unsafe(ry);
    this.writer.writeUint8Unsafe(ccwDir);
  }
  public emitPathAddRoundRect(p: MemOp, rect: MemOp, radii: MemOp, ccwDir: number): void {
    this.writer.performPossibleBufferSwitching(15);
    this.writer.writeUint16Unsafe(Opcode.kPathAddRoundRect | 0x400);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeUint32Unsafe(radii);
    this.writer.writeUint8Unsafe(ccwDir);
  }
  public emitPathAddPoly(p: MemOp, pts: MemOp, close: number): void {
    this.writer.performPossibleBufferSwitching(11);
    this.writer.writeUint16Unsafe(Opcode.kPathAddPoly | 0x300);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(pts);
    this.writer.writeUint8Unsafe(close);
  }
  public emitPathTransform(p: MemOp, mat: MemOp, dst: MemOp, applyPerspectiveClip: number): void {
    this.writer.performPossibleBufferSwitching(15);
    this.writer.writeUint16Unsafe(Opcode.kPathTransform | 0x400);
    this.writer.writeUint32Unsafe(p);
    this.writer.writeUint32Unsafe(mat);
    this.writer.writeUint32Unsafe(dst);
    this.writer.writeUint8Unsafe(applyPerspectiveClip);
  }
  public emitSave(): void {
    this.writer.performPossibleBufferSwitching(2);
    this.writer.writeUint16Unsafe(Opcode.kSave | 0x0);
  }
  public emitRestore(): void {
    this.writer.performPossibleBufferSwitching(2);
    this.writer.writeUint16Unsafe(Opcode.kRestore | 0x0);
  }
  public emitTranslate(dx: number, dy: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kTranslate | 0x200);
    this.writer.writeFloat32Unsafe(dx);
    this.writer.writeFloat32Unsafe(dy);
  }
  public emitScale(sx: number, sy: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kScale | 0x200);
    this.writer.writeFloat32Unsafe(sx);
    this.writer.writeFloat32Unsafe(sy);
  }
  public emitRotate(degrees: number): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kRotate | 0x100);
    this.writer.writeFloat32Unsafe(degrees);
  }
  public emitRotate2(degrees: number, px: number, py: number): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kRotate2 | 0x300);
    this.writer.writeFloat32Unsafe(degrees);
    this.writer.writeFloat32Unsafe(px);
    this.writer.writeFloat32Unsafe(py);
  }
  public emitSkew(sx: number, sy: number): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kSkew | 0x200);
    this.writer.writeFloat32Unsafe(sx);
    this.writer.writeFloat32Unsafe(sy);
  }
  public emitConcat(matrix: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kConcat | 0x100);
    this.writer.writeUint32Unsafe(matrix);
  }
  public emitResetMatrix(): void {
    this.writer.performPossibleBufferSwitching(2);
    this.writer.writeUint16Unsafe(Opcode.kResetMatrix | 0x0);
  }
  public emitSetMatrix(matrix: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kSetMatrix | 0x100);
    this.writer.writeUint32Unsafe(matrix);
  }
  public emitClipRect(rect: MemOp, op: number, doAntialias: number): void {
    this.writer.performPossibleBufferSwitching(8);
    this.writer.writeUint16Unsafe(Opcode.kClipRect | 0x300);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeUint8Unsafe(op);
    this.writer.writeUint8Unsafe(doAntialias);
  }
  public emitClipRRect(rect: MemOp, op: number, doAntialias: number): void {
    this.writer.performPossibleBufferSwitching(8);
    this.writer.writeUint16Unsafe(Opcode.kClipRRect | 0x300);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeUint8Unsafe(op);
    this.writer.writeUint8Unsafe(doAntialias);
  }
  public emitClipPath(path: MemOp, op: number, doAntialias: number): void {
    this.writer.performPossibleBufferSwitching(8);
    this.writer.writeUint16Unsafe(Opcode.kClipPath | 0x300);
    this.writer.writeUint32Unsafe(path);
    this.writer.writeUint8Unsafe(op);
    this.writer.writeUint8Unsafe(doAntialias);
  }
  public emitClipShader(shader: MemOp, op: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kClipShader | 0x200);
    this.writer.writeUint32Unsafe(shader);
    this.writer.writeUint8Unsafe(op);
  }
  public emitClipRegion(rgn: MemOp, op: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kClipRegion | 0x200);
    this.writer.writeUint32Unsafe(rgn);
    this.writer.writeUint8Unsafe(op);
  }
  public emitDrawColor(color: number, mode: number): void {
    this.writer.performPossibleBufferSwitching(7);
    this.writer.writeUint16Unsafe(Opcode.kDrawColor | 0x200);
    this.writer.writeUint32Unsafe(color);
    this.writer.writeUint8Unsafe(mode);
  }
  public emitClear(color: number): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kClear | 0x100);
    this.writer.writeUint32Unsafe(color);
  }
  public emitDrawPaint(p: MemOp): void {
    this.writer.performPossibleBufferSwitching(6);
    this.writer.writeUint16Unsafe(Opcode.kDrawPaint | 0x100);
    this.writer.writeUint32Unsafe(p);
  }
  public emitDrawLine(x0: number, y0: number, x1: number, y1: number, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kDrawLine | 0x500);
    this.writer.writeFloat32Unsafe(x0);
    this.writer.writeFloat32Unsafe(y0);
    this.writer.writeFloat32Unsafe(x1);
    this.writer.writeFloat32Unsafe(y1);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawRect(rect: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawRect | 0x200);
    this.writer.writeUint32Unsafe(rect);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawRegion(rgn: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawRegion | 0x200);
    this.writer.writeUint32Unsafe(rgn);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawOval(oval: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawOval | 0x200);
    this.writer.writeUint32Unsafe(oval);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawRRect(rrect: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawRRect | 0x200);
    this.writer.writeUint32Unsafe(rrect);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawDRRect(outer: MemOp, inner: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kDrawDRRect | 0x300);
    this.writer.writeUint32Unsafe(outer);
    this.writer.writeUint32Unsafe(inner);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawCircle(cx: number, cy: number, radius: number, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kDrawCircle | 0x400);
    this.writer.writeFloat32Unsafe(cx);
    this.writer.writeFloat32Unsafe(cy);
    this.writer.writeFloat32Unsafe(radius);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawArc(oval: MemOp, startAngle: number, sweepAngle: number, useCenter: number, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(19);
    this.writer.writeUint16Unsafe(Opcode.kDrawArc | 0x500);
    this.writer.writeUint32Unsafe(oval);
    this.writer.writeFloat32Unsafe(startAngle);
    this.writer.writeFloat32Unsafe(sweepAngle);
    this.writer.writeUint8Unsafe(useCenter);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawPath(path: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(10);
    this.writer.writeUint16Unsafe(Opcode.kDrawPath | 0x200);
    this.writer.writeUint32Unsafe(path);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawImage(image: MemOp, left: number, top: number, sampling: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(22);
    this.writer.writeUint16Unsafe(Opcode.kDrawImage | 0x500);
    this.writer.writeUint32Unsafe(image);
    this.writer.writeFloat32Unsafe(left);
    this.writer.writeFloat32Unsafe(top);
    this.writer.writeUint32Unsafe(sampling);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawImageRect(image: MemOp, dst: MemOp, sampling: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(18);
    this.writer.writeUint16Unsafe(Opcode.kDrawImageRect | 0x400);
    this.writer.writeUint32Unsafe(image);
    this.writer.writeUint32Unsafe(dst);
    this.writer.writeUint32Unsafe(sampling);
    this.writer.writeUint32Unsafe(paint);
  }
  public emitDrawPicture(pic: MemOp, matrix: MemOp, paint: MemOp): void {
    this.writer.performPossibleBufferSwitching(14);
    this.writer.writeUint16Unsafe(Opcode.kDrawPicture | 0x300);
    this.writer.writeUint32Unsafe(pic);
    this.writer.writeUint32Unsafe(matrix);
    this.writer.writeUint32Unsafe(paint);
  }
}
